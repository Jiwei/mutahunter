{
  "test_app.py": [
    {
      "id": "1",
      "source_path": "app.py",
      "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/1_app.py",
      "status": "KILLED",
      "error_msg": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0\nrootdir: /Users/taikorind/Documents/personal/codeintegrity/mutahunter\nconfigfile: pyproject.toml\nplugins: cov-5.0.0, anyio-4.4.0, timeout-2.3.1\ncollected 12 items\n\ntest_app.py F...........                                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_root ___________________________________\n\n    def test_root():\n        \"\"\"\n        Test the root endpoint by sending a GET request to \"/\" and checking the response status code and JSON body.\n        \"\"\"\n        response = client.get(\"/\")\n        assert response.status_code == 200\n>       assert response.json() == {\"message\": \"Welcome to the FastAPI application!\"}\nE       AssertionError: assert {'message': '...FastAPI app!'} == {'message': '...application!'}\nE         \nE         Differing items:\nE         {'message': 'Welcome to the FastAPI app!'} != {'message': 'Welcome to the FastAPI application!'}\nE         Use -v to get more diff\n\ntest_app.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED test_app.py::test_root - AssertionError: assert {'message': '...FastAP...\n========================= 1 failed, 11 passed in 0.37s =========================\n",
      "test_file_path": "test_app.py",
      "diff": " async def root():\n     \"\"\"\n     A simple function that serves as the root endpoint for the FastAPI application.\n     No parameters are passed into the function.\n     Returns a dictionary with a welcome message.\n     \"\"\"\n-    return {\"message\": \"Welcome to the FastAPI application!\"}\n+    return {\"message\": \"Welcome to the FastAPI app!\"} # Mutation: Changed the welcome message to test string comparison.\n"
    },
    {
      "id": "2",
      "source_path": "app.py",
      "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/2_app.py",
      "status": "KILLED",
      "error_msg": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0\nrootdir: /Users/taikorind/Documents/personal/codeintegrity/mutahunter\nconfigfile: pyproject.toml\nplugins: cov-5.0.0, anyio-4.4.0, timeout-2.3.1\ncollected 12 items\n\ntest_app.py ...........F                                                 [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_current_date _______________________________\n\n    def test_current_date():\n>       response = client.get(\"/current-date\")\n\ntest_app.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/testclient.py:548: in get\n    return super().get(\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/httpx/_client.py:1054: in get\n    return self.request(\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/testclient.py:516: in request\n    return super().request(\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/httpx/_client.py:827: in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/httpx/_client.py:914: in send\n    response = self._send_handling_auth(\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/httpx/_client.py:942: in _send_handling_auth\n    response = self._send_handling_redirects(\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/httpx/_client.py:979: in _send_handling_redirects\n    response = self._send_single_request(request)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/httpx/_client.py:1015: in _send_single_request\n    response = transport.handle_request(request)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/testclient.py:398: in handle_request\n    raise exc\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/testclient.py:395: in handle_request\n    portal.call(self.app, scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/anyio/from_thread.py:287: in call\n    return cast(T_Retval, self.start_task_soon(func, *args).result())\n/Users/taikorind/.pyenv/versions/3.11.9/lib/python3.11/concurrent/futures/_base.py:449: in result\n    return self.__get_result()\n/Users/taikorind/.pyenv/versions/3.11.9/lib/python3.11/concurrent/futures/_base.py:401: in __get_result\n    raise self._exception\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/anyio/from_thread.py:218: in _call_func\n    retval = await retval_or_awaitable\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/fastapi/applications.py:1054: in __call__\n    await super().__call__(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/applications.py:123: in __call__\n    await self.middleware_stack(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/middleware/errors.py:186: in __call__\n    raise exc\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/middleware/errors.py:164: in __call__\n    await self.app(scope, receive, _send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/middleware/exceptions.py:65: in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/_exception_handler.py:64: in wrapped_app\n    raise exc\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/_exception_handler.py:53: in wrapped_app\n    await app(scope, receive, sender)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/routing.py:756: in __call__\n    await self.middleware_stack(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/routing.py:776: in app\n    await route.handle(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/routing.py:297: in handle\n    await self.app(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/routing.py:77: in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/_exception_handler.py:64: in wrapped_app\n    raise exc\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/_exception_handler.py:53: in wrapped_app\n    await app(scope, receive, sender)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/starlette/routing.py:72: in app\n    response = await func(request)\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/fastapi/routing.py:278: in app\n    raw_response = await run_endpoint_function(\n/Users/taikorind/.pyenv/versions/mutahunter/lib/python3.11/site-packages/fastapi/routing.py:191: in run_endpoint_function\n    return await dependant.call(**values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @app.get(\"/current-date\")\n    async def current_date():\n        \"\"\"\n        Get the current date as an ISO-formatted string.\n        \"\"\"\n>       return {\"date\": (date.today() + timedelta(days=1)).isoformat()}  # Mutation: Return the date of the next day to test date validation.\nE       NameError: name 'timedelta' is not defined\n\napp.py:23: NameError\n=========================== short test summary info ============================\nFAILED test_app.py::test_current_date - NameError: name 'timedelta' is not de...\n========================= 1 failed, 11 passed in 0.49s =========================\n",
      "test_file_path": "test_app.py",
      "diff": " async def current_date():\n     \"\"\"\n     Get the current date as an ISO-formatted string.\n     \"\"\"\n-    return {\"date\": date.today().isoformat()}\n+    return {\"date\": (date.today() + timedelta(days=1)).isoformat()}  # Mutation: Return the date of the next day to test date validation.\n"
    },
    {
      "id": "3",
      "source_path": "app.py",
      "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/3_app.py",
      "status": "KILLED",
      "error_msg": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0\nrootdir: /Users/taikorind/Documents/personal/codeintegrity/mutahunter\nconfigfile: pyproject.toml\nplugins: cov-5.0.0, anyio-4.4.0, timeout-2.3.1\ncollected 12 items\n\ntest_app.py ..........F.                                                 [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_add ___________________________________\n\n    def test_add():\n        response = client.get(\"/add/3/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 7}\nE       AssertionError: assert {'result': -1} == {'result': 7}\nE         \nE         Differing items:\nE         {'result': -1} != {'result': 7}\nE         Use -v to get more diff\n\ntest_app.py:74: AssertionError\n=========================== short test summary info ============================\nFAILED test_app.py::test_add - AssertionError: assert {'result': -1} == {'res...\n========================= 1 failed, 11 passed in 0.35s =========================\n",
      "test_file_path": "test_app.py",
      "diff": " async def add(num1: int, num2: int):\n     \"\"\"\n     An asynchronous function that takes two integer parameters 'num1' and 'num2', and returns a dictionary containing the result of adding 'num1' and 'num2' under the key 'result'.\n     \"\"\"\n-    return {\"result\": num1 + num2}\n+    return {\"result\": num1 - num2} # Mutation: Change addition to subtraction to test if the test suite catches this logical error.\n"
    },
    {
      "id": "5",
      "source_path": "app.py",
      "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/5_app.py",
      "status": "KILLED",
      "error_msg": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0\nrootdir: /Users/taikorind/Documents/personal/codeintegrity/mutahunter\nconfigfile: pyproject.toml\nplugins: cov-5.0.0, anyio-4.4.0, timeout-2.3.1\ncollected 12 items\n\ntest_app.py ........F...                                                 [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_multiply _________________________________\n\n    def test_multiply():\n        response = client.get(\"/multiply/3/4\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 12}\nE       AssertionError: assert {'result': 13} == {'result': 12}\nE         \nE         Differing items:\nE         {'result': 13} != {'result': 12}\nE         Use -v to get more diff\n\ntest_app.py:62: AssertionError\n=========================== short test summary info ============================\nFAILED test_app.py::test_multiply - AssertionError: assert {'result': 13} == ...\n========================= 1 failed, 11 passed in 0.36s =========================\n",
      "test_file_path": "test_app.py",
      "diff": " async def multiply(num1: int, num2: int):\n     \"\"\"\n     Multiply two numbers and return the result as a dictionary.\n \n     Parameters:\n     - num1 (int): The first number to be multiplied.\n     - num2 (int): The second number to be multiplied.\n \n     Returns:\n     - dict: A dictionary containing the result of the multiplication.\n     \"\"\"\n-    return {\"result\": num1 * num2}\n+    return {\"result\": num1 * num2 + 1} # Mutation: Introduce an off-by-one error in the multiplication result.\n"
    },
    {
      "id": "7",
      "source_path": "app.py",
      "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/7_app.py",
      "status": "KILLED",
      "error_msg": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0\nrootdir: /Users/taikorind/Documents/personal/codeintegrity/mutahunter\nconfigfile: pyproject.toml\nplugins: cov-5.0.0, anyio-4.4.0, timeout-2.3.1\ncollected 12 items\n\ntest_app.py .....F......                                                 [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_square __________________________________\n\n    def test_square():\n        response = client.get(\"/square/5\")\n        assert response.status_code == 200\n>       assert response.json() == {\"result\": 25}\nE       AssertionError: assert {'result': 125} == {'result': 25}\nE         \nE         Differing items:\nE         {'result': 125} != {'result': 25}\nE         Use -v to get more diff\n\ntest_app.py:44: AssertionError\n=========================== short test summary info ============================\nFAILED test_app.py::test_square - AssertionError: assert {'result': 125} == {...\n========================= 1 failed, 11 passed in 0.36s =========================\n",
      "test_file_path": "test_app.py",
      "diff": " async def square(number: int):\n     \"\"\"\n     Return the square of a number.\n     \"\"\"\n-    return {\"result\": number**2}\n+    return {\"result\": number**3} # Mutation: Change square to cube to test if the test suite catches this logical error.\n"
    },
    {
      "id": "11",
      "source_path": "app.py",
      "mutant_path": "/Users/taikorind/Documents/personal/codeintegrity/mutahunter/examples/python_fastapi/logs/_latest/mutants/11_app.py",
      "status": "KILLED",
      "error_msg": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0\nrootdir: /Users/taikorind/Documents/personal/codeintegrity/mutahunter\nconfigfile: pyproject.toml\nplugins: cov-5.0.0, anyio-4.4.0, timeout-2.3.1\ncollected 12 items\n\ntest_app.py .F..........                                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_echo ___________________________________\n\n    def test_echo():\n        response = client.get(\"/echo/hello\")\n        assert response.status_code == 200\n>       assert response.json() == {\"message\": \"hello\"}\nE       AssertionError: assert {'message': 'HELLO'} == {'message': 'hello'}\nE         \nE         Differing items:\nE         {'message': 'HELLO'} != {'message': 'hello'}\nE         Use -v to get more diff\n\ntest_app.py:20: AssertionError\n=========================== short test summary info ============================\nFAILED test_app.py::test_echo - AssertionError: assert {'message': 'HELLO'} =...\n========================= 1 failed, 11 passed in 0.35s =========================\n",
      "test_file_path": "test_app.py",
      "diff": " async def echo(message: str):\n     \"\"\"\n     Returns the same message that is sent to it.\n     \"\"\"\n-    return {\"message\": message}\n+    return {\"message\": message.upper()} # Mutation: Convert the message to uppercase to test case sensitivity.\n"
    }
  ]
}